name: swap blue-green

on:
    workflow_dispatch:
      inputs:
        environment:
          description: 'Which environment to swap to (blue/green)'
          default: 'blue'
  
jobs:
  swap_cnames:
    runs-on: ubuntu-latest
    env:
      DOTNET_VERSION: '9.0'
      AWS_REGION: ${{ secrets.AWS_REGION }}
      APP_SOLUTION_BUCKET: ${{ secrets.SOLUTION_S3_BUCKET }}
      APP_NAME: ${{ secrets.EB_APP_NAME }}
      ENV_GREEN: ${{ secrets.EB_ENV_GREEN }}
      ENV_BLUE: ${{ secrets.EB_ENV_BLUE }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Swap Blue-Green Environments
        run: |
            # Get version labels
            BLUE_VERSION_LABEL=$(aws elasticbeanstalk describe-environments \
            --application-name $APP_NAME \
            --environment-names $ENV_BLUE \
            --query "Environments[0].VersionLabel" \
            --output text)
        
            GREEN_VERSION_LABEL=$(aws elasticbeanstalk describe-environments \
            --application-name $APP_NAME \
            --environment-names $ENV_GREEN \
            --query "Environments[0].VersionLabel" \
            --output text)
        
            echo "Blue version: $BLUE_VERSION_LABEL"
            echo "Green version: $GREEN_VERSION_LABEL"
        
            # Define source and target environments based on desired deployment
            if [ "${{ github.event.inputs.environment }}" == "blue" ]; then
            SOURCE_ENV=$ENV_BLUE
            TARGET_ENV=$ENV_GREEN
            elif [ "${{ github.event.inputs.environment }}" == "green" ]; then
            SOURCE_ENV=$ENV_GREEN
            TARGET_ENV=$ENV_BLUE
            else
            echo "Invalid environment ${{ github.event.inputs.environment }}"
            exit 1
            fi
        
            echo "Swapping CNAMEs: $SOURCE_ENV â†’ $TARGET_ENV"
            aws elasticbeanstalk swap-environment-cnames \
            --source-environment-name "$SOURCE_ENV" \
            --destination-environment-name "$TARGET_ENV"
        
            ENV_CNAME=$(aws elasticbeanstalk describe-environments \
            --application-name $APP_NAME \
            --environment-names $TARGET_ENV \
            --query "Environments[0].CNAME" \
            --output text)
        
            echo "$ENV_CNAME" > cname.txt
            echo "Live environment CNAME: $(cat cname.txt)"

        