name: Blue-Green Deploy .NET App to Elastic Beanstalk

on:
  push:
    branches:
      - main
  workflow_dispatch:

env:
  DOTNET_VERSION: '9.0'
  AWS_REGION: ${{ secrets.AWS_REGION }}
  AWS_S3_BUCKET: ${{ secrets.S3_BUCKET }}
  ACTIVE_ENV: sample-eb-dotnet-app-prod
  INACTIVE_ENV: sample-eb-dotnet-app-dev
  APP_NAME: sample-eb-dotnet-app

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    outputs:
      version_label: ${{ steps.create_version.outputs.version_label }}

    steps:
    - name: Checkout Code
      uses: actions/checkout@v3

    - name: Set up .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: Restore Dependencies
      run: dotnet restore

    - name: Build
      run: dotnet build --configuration Release --no-restore

    - name: Publish
      run: dotnet publish -c Release -r linux-x64 --self-contained true -o publish_output

    - name: Zip Publish Output
      run: |
        cd publish_output
        zip -r ../app.zip .

    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Create Version Label
      id: create_version
      run: |
        VERSION_LABEL="ver-${{ github.run_id }}-${{ github.run_number }}"
        echo "VERSION_LABEL=$VERSION_LABEL" >> $GITHUB_ENV
        echo "version_label=$VERSION_LABEL" >> $GITHUB_OUTPUT

    - name: Upload App.zip to S3
      run: |
        aws s3 cp app.zip s3://${{ env.AWS_S3_BUCKET }}/app-${{ env.VERSION_LABEL }}.zip

    - name: Deploy to Inactive Environment
      run: |
        aws elasticbeanstalk create-application-version \
          --application-name ${{ env.APP_NAME }} \
          --version-label ${{ env.VERSION_LABEL }} \
          --source-bundle S3Bucket=${{ env.AWS_S3_BUCKET }},S3Key=app-${{ env.VERSION_LABEL }}.zip \
          --auto-create-application

        aws elasticbeanstalk update-environment \
          --environment-name ${{ env.INACTIVE_ENV }} \
          --version-label ${{ env.VERSION_LABEL }}

    - name: Wait for Deployment to Finish
      run: |
        echo "Waiting for inactive environment deployment..."
        aws elasticbeanstalk wait environment-updated --environment-name ${{ env.INACTIVE_ENV }}
        echo "Deployment to inactive environment completed."

  manual-approval:
    needs: build-and-deploy
    runs-on: ubuntu-latest
    environment:
      name: production
      url: https://${{ env.INACTIVE_ENV }}.eba-hvepxiqp.us-east-1.elasticbeanstalk.com
    steps:
    - name: Await Manual Approval
      run: echo "Waiting for manual approval to swap CNAMEs..."

  swap-cnames:
    needs: manual-approval
    runs-on: ubuntu-latest
    steps:
    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Swap Environment CNAMEs
      run: |
        echo "Swapping CNAMEs: ${ACTIVE_ENV} <-> ${INACTIVE_ENV}"
        aws elasticbeanstalk swap-environment-cnames \
          --source-environment-name ${{ env.ACTIVE_ENV }} \
          --destination-environment-name ${{ env.INACTIVE_ENV }}
