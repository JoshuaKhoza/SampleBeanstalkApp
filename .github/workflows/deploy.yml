name: Deploy .NET App to Elastic Beanstalk (Blue-Green + Manual Approval)

on:
  push:
    branches:
      - main  # Trigger on commits to main branch
  workflow_dispatch:
    inputs:
      deploy_environment:
        description: 'Select the environment to deploy to (blue or green)'
        required: true
        type: choice
        options:
          - blue
          - green

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    outputs:
      version_label: ${{ steps.create_version.outputs.version_label }}
      deploy_env: ${{ steps.determine-env.outputs.deploy_env }}
    env:
      DOTNET_VERSION: '9.0'
      AWS_REGION: ${{ secrets.AWS_REGION }}
      AWS_S3_BUCKET: ${{ secrets.S3_BUCKET }}
      APPLICATION_NAME: 'sample-eb-dotnet-app'
      PROD_ENV: 'sample-eb-dotnet-app-green'
      DEV_ENV: 'sample-eb-dotnet-app-blue'

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: Restore dependencies
      run: dotnet restore

    - name: Build
      run: dotnet build --configuration Release --no-restore

    - name: Publish
      run: dotnet publish -c Release -r linux-x64 --self-contained true -o publish_output

    - name: Create Version Label
      id: create_version
      run: |
        VERSION_LABEL="ver-${{ github.run_id }}-${{ github.run_number }}"
        echo "VERSION_LABEL=$VERSION_LABEL" >> $GITHUB_ENV
        echo "version_label=$VERSION_LABEL" >> $GITHUB_OUTPUT

    - name: Zip publish output
      run: |
        cd publish_output
        zip -r ../app.zip .

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Upload ZIP to S3
      run: |
        aws s3 cp app.zip s3://${{ env.AWS_S3_BUCKET }}/app-${{ steps.create_version.outputs.version_label }}.zip

    - name: Determine the selected environment from commit message
      id: determine-env
      run: |
        # Get the most recent commit message
        COMMIT_MSG=$(git log -1 --pretty=%B)
        echo "Commit message: $COMMIT_MSG"

        # Check if the commit message contains [blue] or [green]
        if [[ "$COMMIT_MSG" == *"[blue]"* ]]; then
          DEPLOY_ENV="blue"
          echo "Deploying to Blue environment (from commit message)."
        elif [[ "$COMMIT_MSG" == *"[green]"* ]]; then
          DEPLOY_ENV="green"
          echo "Deploying to Green environment (from commit message)."
        else
          echo "No environment specified in commit message! Please use '[blue]' or '[green]' in the commit message."
          exit 1
        fi

        # Log and set the corresponding environment for later steps
        echo "Selected environment: $DEPLOY_ENV"
        if [ "$DEPLOY_ENV" == "blue" ]; then
          echo "deploy_env=${{ secrets.DEV_ENV }}" >> $GITHUB_ENV
          echo "deploy_env=${{ secrets.DEV_ENV }}" >> $GITHUB_OUTPUT
        elif [ "$DEPLOY_ENV" == "green" ]; then
          echo "deploy_env=${{ secrets.PROD_ENV }}" >> $GITHUB_ENV
          echo "deploy_env=${{ secrets.PROD_ENV }}" >> $GITHUB_OUTPUT
        else
          echo "Invalid environment specified!"
          exit 1
        fi

    - name: Deploy to selected environment
      run: |
        aws elasticbeanstalk create-application-version \
          --application-name $APPLICATION_NAME \
          --version-label ${{ steps.create_version.outputs.version_label }} \
          --source-bundle S3Bucket=$AWS_S3_BUCKET,S3Key=app-${{ steps.create_version.outputs.version_label }}.zip

        aws elasticbeanstalk update-environment \
          --application-name $APPLICATION_NAME \
          --environment-name ${{ steps.determine-env.outputs.deploy_env }} \
          --version-label ${{ steps.create_version.outputs.version_label }}

    - name: Wait for the environment to be healthy
      run: |
        aws elasticbeanstalk wait environment-updated \
          --environment-name ${{ steps.determine-env.outputs.deploy_env }} 
        echo "The environment is healthy!"

  wait-for-approval:
    needs: build-and-deploy
    runs-on: ubuntu-latest
    environment:
      name: production
      url: https://${{ needs.build-and-deploy.outputs.deploy_env }}.eba-hvepxiqp.us-east-1.elasticbeanstalk.com
    steps:
    - name: Wait for manual approval
      run: echo "Please approve the deployment to swap environments."

  swap-cnames:
    needs: wait-for-approval
    runs-on: ubuntu-latest
    env:
      AWS_REGION: ${{ secrets.AWS_REGION }}
      APPLICATION_NAME: 'sample-eb-dotnet-app'
    steps:
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Swap Blue-Green Environments
      run: |
        # Get the version labels for both environments
        BLUE_VERSION_LABEL=$(aws elasticbeanstalk describe-environments \
          --application-name $APPLICATION_NAME \
          --environment-names $DEV_ENV \
          --query "Environments[0].VersionLabel" \
          --output text)
    
        GREEN_VERSION_LABEL=$(aws elasticbeanstalk describe-environments \
          --application-name $APPLICATION_NAME \
          --environment-names $PROD_ENV \
          --query "Environments[0].VersionLabel" \
          --output text)
    
        echo "Blue Version: $BLUE_VERSION_LABEL"
        echo "Green Version: $GREEN_VERSION_LABEL"
    
        echo "Selected environment from previous step: $DEPLOY_ENV"
    
        if [ "$DEPLOY_ENV" == "$DEV_ENV" ]; then
          echo "Deployment was to Blue ($DEV_ENV), swapping Blue with Green ($PROD_ENV)."
          SOURCE_ENV=$DEV_ENV
          TARGET_ENV=$PROD_ENV
        elif [ "$DEPLOY_ENV" == "$PROD_ENV" ]; then
          echo "Deployment was to Green ($PROD_ENV), swapping Green with Blue ($DEV_ENV)."
          SOURCE_ENV=$PROD_ENV
          TARGET_ENV=$DEV_ENV
        else
          echo "Invalid environment selected: $DEPLOY_ENV"
          exit 1
        fi
    
        # Swap CNAMEs to make the new environment live
        echo "Swapping CNAMEs: $SOURCE_ENV â†’ $TARGET_ENV"
        aws elasticbeanstalk swap-environment-cnames \
          --source-environment-name "$SOURCE_ENV" \
          --destination-environment-name "$TARGET_ENV"
    
        # Fetch the CNAME of the live environment (the one with the new version)
        ENV_CNAME=$(aws elasticbeanstalk describe-environments \
          --application-name $APPLICATION_NAME \
          --environment-names $TARGET_ENV \
          --query "Environments[0].CNAME" \
          --output text)
    
        echo "Live environment CNAME: $ENV_CNAME"
    
