name: Deploy .NET App to Elastic Beanstalk (Blue-Green)

on:
  push:
    branches:
      - main

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    outputs:
      target_env: ${{ steps.set-target-env.outputs.target }}

    env:
      DOTNET_VERSION: '9.0'
      AWS_REGION: ${{ secrets.AWS_REGION }}
      AWS_S3_BUCKET: ${{ secrets.S3_BUCKET }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: Restore dependencies
      run: dotnet restore

    - name: Run tests
      run: dotnet test --no-restore --verbosity normal

    - name: Build
      run: dotnet build --configuration Release --no-restore

    - name: Publish
      run: dotnet publish -c Release -r linux-x64 --self-contained true -o publish_output

    - name: Zip publish output
      run: |
        cd publish_output
        zip -r ../app.zip .

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Upload ZIP to S3
      run: |
        aws s3 cp app.zip s3://${{ env.AWS_S3_BUCKET }}/app-${{ github.run_id }}.zip

    - name: Create new application version
      run: |
        aws elasticbeanstalk create-application-version \
          --application-name ${{ secrets.EB_APP_NAME }} \
          --version-label "ver-${{ github.run_id }}" \
          --description "GitHub Actions Deploy - $GITHUB_SHA" \
          --source-bundle S3Bucket=${{ env.AWS_S3_BUCKET }},S3Key=app-${{ github.run_id }}.zip

    - name: Determine inactive environment
      id: set-target-env
      run: |
        ACTIVE=$(aws elasticbeanstalk describe-environments \
          --application-name ${{ secrets.EB_APP_NAME }} \
          --query "Environments[?Status=='Ready' && Health=='Green'].EnvironmentName" \
          --output text)

        if [ "$ACTIVE" = "${{ secrets.EB_ENV_BLUE }}" ]; then
          TARGET=${{ secrets.EB_ENV_GREEN }}
        else
          TARGET=${{ secrets.EB_ENV_BLUE }}
        fi

        echo "Deploying to inactive environment: $TARGET"
        echo "target=$TARGET" >> $GITHUB_OUTPUT

    - name: Deploy to inactive environment
      run: |
        aws elasticbeanstalk update-environment \
          --environment-name ${{ steps.set-target-env.outputs.target }} \
          --version-label "ver-${{ github.run_id }}"

    - name: Wait for environment to become healthy
      run: |
        for i in {1..75}; do
          STATUS=$(aws elasticbeanstalk describe-environments \
            --environment-names ${{ steps.set-target-env.outputs.target }} \
            --query "Environments[0].Health" \
            --output text)

          echo "Health: $STATUS"
          if [ "$STATUS" == "Green" ]; then
            break
          fi
          sleep 20
        done

        if [ "$STATUS" != "Green" ]; then
          echo "Environment did not become healthy in time"
          exit 1
        fi

    - name: Smoke Test
      run: |
        CNAME=$(aws elasticbeanstalk describe-environments \
          --environment-names ${{ steps.set-target-env.outputs.target }} \
          --query "Environments[0].CNAME" \
          --output text)
        echo "Testing http://$CNAME"
        curl -f http://$CNAME || exit 1

  manual-approval:
    needs: build-and-deploy
    runs-on: ubuntu-latest
    environment:
      name: production  # Define this in GitHub UI under Environments
    steps:
      - name: Await manual approval
        run: echo "Waiting for manual approval in GitHub UI..."

  swap-cnames:
    needs: manual-approval
    runs-on: ubuntu-latest
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Determine current and target environments
        id: env-info
        run: |
          ACTIVE=$(aws elasticbeanstalk describe-environments \
            --application-name ${{ secrets.EB_APP_NAME }} \
            --query "Environments[?Status=='Ready' && Health=='Green'].EnvironmentName" \
            --output text)

          if [ "$ACTIVE" = "${{ secrets.EB_ENV_BLUE }}" ]; then
            TARGET=${{ secrets.EB_ENV_GREEN }}
          else
            TARGET=${{ secrets.EB_ENV_BLUE }}
          fi

          echo "source=$ACTIVE" >> $GITHUB_OUTPUT
          echo "destination=$TARGET" >> $GITHUB_OUTPUT

      - name: Swap Blue-Green CNAMEs
        run: |
          aws elasticbeanstalk swap-environment-cnames \
            --source-environment-name "${{ steps.env-info.outputs.source }}" \
            --destination-environment-name "${{ steps.env-info.outputs.destination }}"

      - name: Confirm environments still running
        run: |
          aws elasticbeanstalk describe-environments \
            --application-name ${{ secrets.EB_APP_NAME }} \
            --query "Environments[*].{Name:EnvironmentName, Status:Status, Health:Health, Version:VersionLabel}" \
            --output table
