name: Deploy .NET App to Elastic Beanstalk (Blue-Green)

on:
  push:
    branches:
      - main

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    env:
      DOTNET_VERSION: '9.0'
      AWS_REGION: ${{ secrets.AWS_REGION }}
      AWS_S3_BUCKET: ${{ secrets.S3_BUCKET }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: Restore dependencies
      run: dotnet restore

    - name: Build
      run: dotnet build --configuration Release --no-restore

    - name: Publish
      run: dotnet publish -c Release -r linux-x64 --self-contained true -o publish_output

    - name: Zip publish output
      run: |
        cd publish_output
        zip -r ../app.zip .

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}

    - name: Upload ZIP to S3
      run: |
        aws s3 cp app.zip s3://${{ env.AWS_S3_BUCKET }}/app-${{ github.run_id }}.zip

    - name: Ensure inactive environment exists
      id: check_inactive
      run: |
        ENV_LIST=$(aws elasticbeanstalk describe-environments \
          --application-name ${{ secrets.EB_APP_NAME }} \
          --query "Environments[].EnvironmentName" \
          --output text)

        echo "Environments found: $ENV_LIST"

        if [[ "$ENV_LIST" == *"${{ secrets.EB_ENV_BLUE }}"* && "$ENV_LIST" == *"${{ secrets.EB_ENV_GREEN }}"* ]]; then
          echo "Both environments exist."
          echo "has_both=true" >> $GITHUB_OUTPUT
        else
          echo "Creating inactive environment..."

          ACTIVE_ENV=$(echo $ENV_LIST)
          if [[ "$ACTIVE_ENV" == "${{ secrets.EB_ENV_BLUE }}" ]]; then
            TARGET_ENV="${{ secrets.EB_ENV_GREEN }}"
          else
            TARGET_ENV="${{ secrets.EB_ENV_BLUE }}"
          fi

          echo "Creating $TARGET_ENV..."

          aws elasticbeanstalk create-environment \
            --application-name ${{ secrets.EB_APP_NAME }} \
            --environment-name "$TARGET_ENV" \
            --version-label "ver-${{ github.run_id }}" \
            --solution-stack-name "64bit Amazon Linux 2023 v3.4.1 running .NET 9" \
            --option-settings file://.ebextensions/options.json || exit 1

          echo "has_both=false" >> $GITHUB_OUTPUT
          echo "target=$TARGET_ENV" >> $GITHUB_OUTPUT
        fi

    - name: Create new app version
      run: |
        aws elasticbeanstalk create-application-version \
          --application-name ${{ secrets.EB_APP_NAME }} \
          --version-label "ver-${{ github.run_id }}" \
          --source-bundle S3Bucket=${{ env.AWS_S3_BUCKET }},S3Key=app-${{ github.run_id }}.zip

    - name: Determine deployment target
      id: inactive_env
      if: steps.check_inactive.outputs.has_both == 'true'
      run: |
        ACTIVE_ENV=$(aws elasticbeanstalk describe-environments \
          --application-name ${{ secrets.EB_APP_NAME }} \
          --query "Environments[?Status=='Ready' && Health=='Green'].EnvironmentName" \
          --output text)

        if [ "$ACTIVE_ENV" == "${{ secrets.EB_ENV_BLUE }}" ]; then
          echo "target=${{ secrets.EB_ENV_GREEN }}" >> $GITHUB_OUTPUT
        else
          echo "target=${{ secrets.EB_ENV_BLUE }}" >> $GITHUB_OUTPUT
        fi

    - name: Deploy to inactive environment
      if: steps.check_inactive.outputs.has_both == 'true'
      run: |
        aws elasticbeanstalk update-environment \
          --environment-name ${{ steps.inactive_env.outputs.target }} \
          --version-label "ver-${{ github.run_id }}"

    - name: Wait for environment to become healthy
      if: steps.check_inactive.outputs.has_both == 'true'
      run: |
        echo "Waiting for ${{ steps.inactive_env.outputs.target }} to be healthy..."
        for i in {1..30}; do
          STATUS=$(aws elasticbeanstalk describe-environments \
            --environment-names ${{ steps.inactive_env.outputs.target }} \
            --query "Environments[0].Health" \
            --output text)
          echo "Health: $STATUS"
          if [ "$STATUS" == "Green" ]; then
            break
          fi
          sleep 20
        done

    - name: Smoke Test
      if: steps.check_inactive.outputs.has_both == 'true'
      run: |
        ENV_URL=$(aws elasticbeanstalk describe-environments \
          --environment-names ${{ steps.inactive_env.outputs.target }} \
          --query "Environments[0].CNAME" \
          --output text)
        echo "Testing http://$ENV_URL"
        curl -f http://$ENV_URL || exit 1

  manual-approval:
    needs: build-and-deploy
    runs-on: ubuntu-latest
    environment:
      name: production
      url: http://placeholder-for-ui
    steps:
      - name: Await manual approval
        run: echo "Waiting for manual approval in GitHub UI..."

  swap-cnames:
    needs: manual-approval
    runs-on: ubuntu-latest
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Swap Blue-Green Environments
        run: |
          TARGET=${{ needs.build-and-deploy.outputs.inactive_env_target }}
          if [ "$TARGET" = "${{ secrets.EB_ENV_BLUE }}" ]; then
            SOURCE=${{ secrets.EB_ENV_BLUE }}
            DEST=${{ secrets.EB_ENV_GREEN }}
          else
            SOURCE=${{ secrets.EB_ENV_GREEN }}
            DEST=${{ secrets.EB_ENV_BLUE }}
          fi

          echo "Swapping CNAMEs: $SOURCE â†’ $DEST"
          aws elasticbeanstalk swap-environment-cnames \
            --source-environment-name "$SOURCE" \
            --destination-environment-name "$DEST"
