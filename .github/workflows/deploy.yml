name: Deploy .NET App to Elastic Beanstalk (Blue-Green + Manual Approval)

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    outputs:
      version_label: ${{ steps.create_version.outputs.version_label }}
      source_env: ${{ steps.determine-env.outputs.source_env }}
      target_env: ${{ steps.determine-env.outputs.target_env }}
    env:
      DOTNET_VERSION: '9.0'
      AWS_REGION: ${{ secrets.AWS_REGION }}
      AWS_S3_BUCKET: ${{ secrets.S3_BUCKET }}
      APPLICATION_NAME: 'sample-eb-dotnet-app'
      PROD_ENV: 'sample-eb-dotnet-app-green'
      DEV_ENV: 'sample-eb-dotnet-app-blue'

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: Restore dependencies
      run: dotnet restore

    - name: Build
      run: dotnet build --configuration Release --no-restore

    - name: Publish
      run: dotnet publish -c Release -r linux-x64 --self-contained true -o publish_output

    - name: Create Version Label
      id: create_version
      run: |
        VERSION_LABEL="ver-${{ github.run_id }}-${{ github.run_number }}"
        echo "VERSION_LABEL=$VERSION_LABEL" >> $GITHUB_ENV
        echo "version_label=$VERSION_LABEL" >> $GITHUB_OUTPUT

    - name: Zip publish output
      run: |
        cd publish_output
        zip -r ../app.zip .

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Upload ZIP to S3
      run: |
        aws s3 cp app.zip s3://${{ env.AWS_S3_BUCKET }}/app-${{ env.VERSION_LABEL }}.zip

    - name: Determine active environment
      id: determine-env
      run: |
        # Check if the Green environment is active (i.e., "Healthy" or "Ready")
        ACTIVE_GREEN_ENV=$(aws elasticbeanstalk describe-environments --application-name $APPLICATION_NAME --query "Environments[?EnvironmentName=='$PROD_ENV'].[Status]" --output text)
        if [ "$ACTIVE_GREEN_ENV" == "Ready" ]; then
          # Green is active, so deploy to Blue
          echo "source_env=${PROD_ENV}" >> $GITHUB_OUTPUT
          echo "target_env=${DEV_ENV}" >> $GITHUB_OUTPUT
        else
          # Blue is active, so deploy to Green
          echo "source_env=${DEV_ENV}" >> $GITHUB_OUTPUT
          echo "target_env=${PROD_ENV}" >> $GITHUB_OUTPUT
        fi

    - name: Deploy to target environment
      run: |
        aws elasticbeanstalk create-application-version \
          --application-name $APPLICATION_NAME \
          --version-label ${{ steps.create_version.outputs.version_label }} \
          --source-bundle S3Bucket=$AWS_S3_BUCKET,S3Key=app-${{ steps.create_version.outputs.version_label }}.zip

        aws elasticbeanstalk update-environment \
          --application-name $APPLICATION_NAME \
          --environment-name ${{ steps.determine-env.outputs.target_env }} \
          --version-label ${{ steps.create_version.outputs.version_label }}

    - name: Wait for both environments to be healthy
      run: |
        echo "Waiting for the environments to be healthy..."
        aws elasticbeanstalk wait environment-updated \
          --environment-name ${{ steps.determine-env.outputs.target_env }}
        aws elasticbeanstalk wait environment-updated \
          --environment-name ${{ steps.determine-env.outputs.source_env }}
        echo "Both environments are healthy!"

  wait-for-approval:
    needs: build-and-deploy
    runs-on: ubuntu-latest
    environment:
      name: production
      url: https://${{ needs.build-and-deploy.outputs.target_env }}.eba-hvepxiqp.us-east-1.elasticbeanstalk.com
    steps:
    - name: Wait for manual approval
      run: echo "Please approve the deployment to swap environments."

  swap-cnames:
    needs: wait-for-approval
    runs-on: ubuntu-latest
    env:
      AWS_REGION: ${{ secrets.AWS_REGION }}
      APPLICATION_NAME: 'sample-eb-dotnet-app'
    steps:
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Swap Blue-Green Environments
      run: |
        TARGET=${{ needs.build-and-deploy.outputs.target_env }}
        if [ "$TARGET" = "${{ secrets.EB_ENV_BLUE }}" ]; then
          SOURCE=${{ secrets.EB_ENV_BLUE }}
          DEST=${{ secrets.EB_ENV_GREEN }}
        else
          SOURCE=${{ secrets.EB_ENV_GREEN }}
          DEST=${{ secrets.EB_ENV_BLUE }}
        fi
        echo "Swapping CNAMEs: $SOURCE â†’ $DEST"
        aws elasticbeanstalk swap-environment-cnames \
          --source-environment-name "$SOURCE" \
          --destination-environment-name "$DEST"
