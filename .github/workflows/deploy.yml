name: Deploy .NET App to Elastic Beanstalk (Blue-Green)

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    outputs:
      target_env: ${{ steps.set-target-env.outputs.target }}
      source_env: ${{ steps.set-target-env.outputs.source }}
      version_label: ${{ steps.create-version.outputs.version_label }}

    env:
      DOTNET_VERSION: '9.0'
      AWS_REGION: ${{ secrets.AWS_REGION }}
      AWS_S3_BUCKET: ${{ secrets.S3_BUCKET }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: Restore dependencies
      run: dotnet restore

    - name: Build
      run: dotnet build --configuration Release --no-restore

    - name: Publish
      run: dotnet publish -c Release -r linux-x64 --self-contained true -o publish_output

    - name: Create version label
      id: create-version
      run: |
        VERSION="ver-${{ github.run_id }}"
        echo "version_label=$VERSION" >> $GITHUB_OUTPUT

    - name: Zip publish output
      run: |
        cd publish_output
        zip -r ../app.zip .

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Upload ZIP to S3
      run: |
        aws s3 cp app.zip s3://${{ env.AWS_S3_BUCKET }}/app-${{ steps.create-version.outputs.version_label }}.zip

    - name: Create new application version
      run: |
        aws elasticbeanstalk create-application-version \
          --application-name ${{ secrets.EB_APP_NAME }} \
          --version-label "${{ steps.create-version.outputs.version_label }}" \
          --source-bundle S3Bucket=${{ env.AWS_S3_BUCKET }},S3Key=app-${{ steps.create-version.outputs.version_label }}.zip

    - name: Determine environments status
      id: set-target-env
      run: |
        # Get all environments status
        ENVIRONMENTS=$(aws elasticbeanstalk describe-environments \
          --application-name ${{ secrets.EB_APP_NAME }} \
          --query "Environments[?Status=='Ready'].[EnvironmentName,Health]" \
          --output text)
        
        echo "Current environments:"
        echo "$ENVIRONMENTS"
        
        # Find current active environment (the one receiving production traffic)
        ACTIVE=$(aws elasticbeanstalk describe-environments \
          --application-name ${{ secrets.EB_APP_NAME }} \
          --query "Environments[?Status=='Ready'].EnvironmentName" \
          --output text | head -n 1)
          
        # If no active environment found, use blue as default
        if [ -z "$ACTIVE" ]; then
          ACTIVE="${{ secrets.EB_ENV_BLUE }}"
          echo "No active environment found, defaulting to: $ACTIVE"
        else
          echo "Current active environment: $ACTIVE"
        fi
        
        # Determine target environment for new deployment
        if [[ "$ACTIVE" == *"${{ secrets.EB_ENV_BLUE }}"* ]]; then
          TARGET="${{ secrets.EB_ENV_GREEN }}"
          SOURCE="${{ secrets.EB_ENV_BLUE }}"
        else
          TARGET="${{ secrets.EB_ENV_BLUE }}"
          SOURCE="${{ secrets.EB_ENV_GREEN }}"
        fi
        
        echo "Target environment for deployment: $TARGET"
        echo "Source (current active) environment: $SOURCE"
        echo "target=$TARGET" >> $GITHUB_OUTPUT
        echo "source=$SOURCE" >> $GITHUB_OUTPUT

    - name: Deploy to target environment
      run: |
        echo "Deploying version ${{ steps.create-version.outputs.version_label }} to ${{ steps.set-target-env.outputs.target }}"
        aws elasticbeanstalk update-environment \
          --environment-name ${{ steps.set-target-env.outputs.target }} \
          --version-label "${{ steps.create-version.outputs.version_label }}"

    - name: Wait for environment to become healthy
      run: |
        echo "Waiting for environment to become healthy..."
        for i in {1..30}; do
          STATUS=$(aws elasticbeanstalk describe-environments \
            --environment-names ${{ steps.set-target-env.outputs.target }} \
            --query "Environments[0].Status" \
            --output text)
            
          HEALTH=$(aws elasticbeanstalk describe-environments \
            --environment-names ${{ steps.set-target-env.outputs.target }} \
            --query "Environments[0].Health" \
            --output text)
            
          echo "Status: $STATUS, Health: $HEALTH"
          
          if [[ "$STATUS" == "Ready" && "$HEALTH" == "Green" ]]; then
            echo "Environment is ready and healthy!"
            break
          fi
          
          if [ $i -eq 30 ]; then
            echo "Environment failed to become healthy in the allotted time"
            exit 1
          fi
          
          sleep 20
        done

    - name: Smoke Test
      run: |
        CNAME=$(aws elasticbeanstalk describe-environments \
          --environment-names ${{ steps.set-target-env.outputs.target }} \
          --query "Environments[0].CNAME" \
          --output text)
          
        echo "Testing http://$CNAME"
        curl -f http://$CNAME || exit 1
        echo "Smoke test passed!"

  manual-approval:
    needs: build-and-deploy
    runs-on: ubuntu-latest
    environment:
      name: production
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
          
      - name: Get environment URL for review
        run: |
          CNAME=$(aws elasticbeanstalk describe-environments \
            --environment-names ${{ needs.build-and-deploy.outputs.target_env }} \
            --query "Environments[0].CNAME" \
            --output text)
            
          echo "You can review the environment at: http://$CNAME"
          
      - name: Await manual approval
        run: echo "Waiting for manual approval in GitHub UI..."

  swap-and-inactivate:
    needs: [build-and-deploy, manual-approval]
    runs-on: ubuntu-latest
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Swap Blue-Green CNAMEs
        run: |
          echo "Swapping traffic from ${{ needs.build-and-deploy.outputs.source_env }} to ${{ needs.build-and-deploy.outputs.target_env }}"
          
          aws elasticbeanstalk swap-environment-cnames \
            --source-environment-name "${{ needs.build-and-deploy.outputs.source_env }}" \
            --destination-environment-name "${{ needs.build-and-deploy.outputs.target_env }}"
            
          echo "Traffic swap completed"

      - name: Verify new environment is serving traffic
        run: |
          # Give AWS a moment to complete the swap
          sleep 10
          
          # Get the CNAME that should now be pointing to the new environment
          SOURCE_CNAME=$(aws elasticbeanstalk describe-environments \
            --environment-names "${{ needs.build-and-deploy.outputs.source_env }}" \
            --query "Environments[0].CNAME" \
            --output text)
            
          TARGET_CNAME=$(aws elasticbeanstalk describe-environments \
            --environment-names "${{ needs.build-and-deploy.outputs.target_env }}" \
            --query "Environments[0].CNAME" \
            --output text)
            
          echo "Source environment CNAME: $SOURCE_CNAME"
          echo "Target environment CNAME: $TARGET_CNAME"
          
          # Verify the new environment is healthy
          HEALTH=$(aws elasticbeanstalk describe-environments \
            --environment-names "${{ needs.build-and-deploy.outputs.target_env }}" \
            --query "Environments[0].Health" \
            --output text)
            
          if [ "$HEALTH" != "Green" ]; then
            echo "New environment is not healthy after swap. Health status: $HEALTH"
            exit 1
          fi
          
          echo "New environment is confirmed healthy and serving traffic"

      - name: Put old environment into inactive state
        run: |
          echo "Setting old environment ${{ needs.build-and-deploy.outputs.source_env }} to inactive state"
          
          # Option 1: Update with same version but scale down to 0 instances
          aws elasticbeanstalk update-environment \
            --environment-name "${{ needs.build-and-deploy.outputs.source_env }}" \
            --option-settings "Namespace=aws:autoscaling:asg,OptionName=MinSize,Value=0" \
                             "Namespace=aws:autoscaling:asg,OptionName=MaxSize,Value=0"
          
          echo "Old environment scaled down to 0 instances"
          
          # Option 2 (Alternative): Or you could completely terminate the environment if preferred
          # aws elasticbeanstalk terminate-environment \
          #   --environment-name "${{ needs.build-and-deploy.outputs.source_env }}"
          
          echo "Deployment completed successfully. New version is serving traffic and old environment has been inactivated."