name: Deploy to AWS Elastic Beanstalk (Blue-Green)

on:
  push:
    branches: [ "main" ]

jobs:
  deploy:
    name: Deploy .NET App via Blue-Green
    runs-on: ubuntu-latest

    env:
      DOTNET_VERSION: '9.0'
      PROJECT_NAME: 'SampleBeanstalkApp'
      ZIP_FILE: 'publish.zip'
      S3_KEY: 'beanstalk-deployments/publish.zip'
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_REGION: ${{ secrets.AWS_REGION }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Setup .NET Core SDK
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: Publish .NET app
      run: |
        dotnet publish -c Release -o publish --self-contained true -r linux-x64
        zip -r ${{ env.ZIP_FILE }} publish/

    - name: Upload ZIP to S3
      run: |
        aws s3 cp ${{ env.ZIP_FILE }} s3://${{ secrets.S3_BUCKET }}/beanstalk-deployments/${{ env.ZIP_FILE }} \
          --acl private \
          --region ${{ secrets.AWS_REGION }}
      
    - name: Check S3 for ZIP file
      run: |
        echo "Checking if publish.zip exists in S3..."
        aws s3 ls s3://${{ secrets.S3_BUCKET }}/beanstalk-deployments/ --region ${{ env.AWS_REGION }}

    - name: Create EB Application Version and Deploy to GREEN
      run: |
        VERSION_LABEL="app-$(date +%s)"
        ZIP_PATH="beanstalk-deployments/${{ env.ZIP_FILE }}"
    
        echo "Creating new EB app version: $VERSION_LABEL"
    
        aws elasticbeanstalk create-application-version \
          --application-name "${{ secrets.EB_APP_NAME }}" \
          --version-label "$VERSION_LABEL" \
          --source-bundle S3Bucket="${{ secrets.S3_BUCKET }}",S3Key="$ZIP_PATH" \
          --region "${{ secrets.AWS_REGION }}"

        echo "Deploying to GREEN environment"
        aws elasticbeanstalk update-environment \
          --environment-name "${{ secrets.EB_ENV_GREEN }}" \
          --version-label "$VERSION_LABEL" \
          --region "${{ env.AWS_REGION }}"

    - name: Wait for Green Deployment to Complete
      run: |
        echo "Waiting for GREEN environment to be ready..."
        aws elasticbeanstalk wait environment-updated \
          --environment-name "${{ secrets.EB_ENV_GREEN }}" \
          --region "${{ env.AWS_REGION }}"

    - name: Swap Blue-Green Environments
      run: |
        echo "Swapping CNAMEs between BLUE and GREEN"
        aws elasticbeanstalk swap-environment-cnames \
          --source-environment-name "${{ secrets.EB_ENV_BLUE }}" \
          --destination-environment-name "${{ secrets.EB_ENV_GREEN }}" \
          --region "${{ env.AWS_REGION }}"
