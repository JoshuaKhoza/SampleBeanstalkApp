# Build and Deploy Workflow
#
# Purpose:
# This workflow builds the application, deploys it to the specified environment (blue or green),
# waits for manual approval, and then swaps the environments to make the new deployment live.
#
# Workflow Sequence:
# 1. Build and package the .NET application
# 2. Upload the package to S3
# 3. Deploy to the specified Elastic Beanstalk environment (blue or green)
# 4. Wait for manual approval
# 5. Swap CNAMEs between environments to route traffic to the new deployment
#
# Blue/Green Deployment Strategy:
# - The application is deployed to the inactive environment (blue or green)
# - After manual approval, traffic is switched to the newly deployed environment
# - This ensures zero-downtime deployments and easy rollbacks

name: build and deploy

on:
  workflow_dispatch:
    inputs:
      deploy_environment:
        description: 'Select the environment to deploy to (blue or green)'
        type: choice
        options:
          - blue
          - green

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    outputs:
      version_label: ${{ steps.create_version.outputs.version_label }}
      deploy_env: ${{ steps.determine-env.outputs.deploy_env }}
      cname: ${{ steps.get-cname.outputs.cname }}
    env:
      DOTNET_VERSION: '9.0'
      AWS_REGION: ${{ secrets.AWS_REGION }}
      APP_SOLUTION_BUCKET: ${{ secrets.SOLUTION_S3_BUCKET }}
      APP_NAME: ${{ secrets.EB_APP_NAME }}
      ENV_GREEN: ${{ secrets.EB_ENV_GREEN }}
      ENV_BLUE: ${{ secrets.EB_ENV_BLUE }}

    steps:
    # Checkout the repository code
    - name: Checkout code
      uses: actions/checkout@v3

    # Set up .NET environment for building the application
    - name: Set up .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    # Restore NuGet packages
    - name: Restore dependencies
      run: |
       cd src/app
       dotnet restore

    # Build the application
    - name: Build
      run: dotnet build --configuration Release --no-restore
      working-directory: src/app

    # Publish the application as a self-contained deployment
    - name: Publish
      run: dotnet publish -c Release -r linux-x64 --self-contained true -o publish_output
      working-directory: src/app

    # Create a unique version label for the deployment
    - name: Create Version Label
      id: create_version
      run: |
        VERSION_LABEL="ver-${{ github.run_id }}-${{ github.run_number }}"
        echo "VERSION_LABEL=$VERSION_LABEL" >> $GITHUB_ENV
        echo "version_label=$VERSION_LABEL" >> $GITHUB_OUTPUT

    # Zip the published output for deployment
    - name: Zip publish output
      run: |
        cd publish_output
        zip -r ../app.zip .
      working-directory: src/app

    # Configure AWS credentials for deployment
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    # Upload the application package to S3
    - name: Upload ZIP to S3
      run: |
        aws s3 cp app.zip s3://${{ env.APP_SOLUTION_BUCKET }}/app-${{ steps.create_version.outputs.version_label }}.zip
      working-directory: src/app

    # Determine which environment to deploy to (blue or green)
    # This step processes the input parameter from the workflow dispatch
    - name: Determine the selected environment
      id: determine-env
      run: |
        if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
          DEPLOY_ENV_TG="${{ github.event.inputs.deploy_environment }}"
          echo "Triggered by workflow_dispatch. Selected environment: $DEPLOY_ENV_TG"
        else
          COMMIT_MSG=$(git log -1 --pretty=%B)
          echo "Commit message: $COMMIT_MSG"

          if [[ "$COMMIT_MSG" == *"[blue]"* ]]; then
            DEPLOY_ENV_TG="blue"
            echo "Deploying to Blue environment (from commit message)."
          elif [[ "$COMMIT_MSG" == *"[green]"* ]]; then
            DEPLOY_ENV_TG="green"
            echo "Deploying to Green environment (from commit message)."
          else
            echo "No environment specified! Use '[blue]' or '[green]' in the commit message."
            exit 1
          fi
        fi

        echo "deploy_env_tg=$DEPLOY_ENV_TG" >> $GITHUB_ENV
        echo "deploy_env_tg=$DEPLOY_ENV_TG" >> $GITHUB_OUTPUT

        if [ "$DEPLOY_ENV_TG" == "blue" ]; then
          echo "deploy_env=${ENV_BLUE}" >> $GITHUB_OUTPUT
        elif [ "$DEPLOY_ENV_TG" == "green" ]; then
          echo "deploy_env=${ENV_GREEN}" >> $GITHUB_OUTPUT
        else
          echo "Invalid environment specified!"
          exit 1
        fi

    # Deploy the application to the selected Elastic Beanstalk environment
    - name: Deploy to selected environment
      run: |
        aws elasticbeanstalk create-application-version \
          --application-name $APP_NAME \
          --version-label ${{ steps.create_version.outputs.version_label }} \
          --source-bundle S3Bucket=$APP_SOLUTION_BUCKET,S3Key=app-${{ steps.create_version.outputs.version_label }}.zip

        aws elasticbeanstalk update-environment \
          --application-name $APP_NAME \
          --environment-name ${{ steps.determine-env.outputs.deploy_env }} \
          --version-label ${{ steps.create_version.outputs.version_label }}

    # Get the CNAME of the deployed environment for later use
    - name: Get deployed environment CNAME
      id: get-cname
      run: |
        CNAME=$(aws elasticbeanstalk describe-environments \
                --application-name $APP_NAME \
                --environment-names ${{ steps.determine-env.outputs.deploy_env }} \
                --query "Environments[0].CNAME" \
                --output text)

        echo "CNAME: $CNAME"
        echo "cname=$CNAME" >> "$GITHUB_OUTPUT"
        echo "CNAME: $CNAME" > cname.txt
        echo "Live environment CNAME: $(cat cname.txt)"

    # Wait for the environment to be healthy before proceeding
    - name: Wait for the environment to be healthy
      run: |
        aws elasticbeanstalk wait environment-updated \
          --environment-name ${{ steps.determine-env.outputs.deploy_env }} 
        echo "The environment is healthy!"

  # Job for manual approval before swapping environments
  # This creates a deployment protection rule in GitHub that requires manual approval
  wait-for-approval:
    needs: build-and-deploy
    runs-on: ubuntu-latest
    environment:
      name: production
      url: https://${{ needs.build-and-deploy.outputs.cname }}
    steps:
    - name: Wait for manual approval
      run: echo "Please approve the deployment to swap environments."

  # Job to swap CNAMEs between blue and green environments
  # This makes the new deployment live after approval
  swap-cnames:
    needs: wait-for-approval
    runs-on: ubuntu-latest
    env:
      DOTNET_VERSION: '9.0'
      AWS_REGION: ${{ secrets.AWS_REGION }}
      APP_SOLUTION_BUCKET: ${{ secrets.SOLUTION_S3_BUCKET }}
      APP_NAME: ${{ secrets.EB_APP_NAME }}
      ENV_GREEN: ${{ secrets.EB_ENV_GREEN }}
      ENV_BLUE: ${{ secrets.EB_ENV_BLUE }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      # Get the current version labels for both environments
      - name: Swap Blue-Green Environments
        run: |
          # Get the version labels for both environments
          BLUE_VERSION_LABEL=$(aws elasticbeanstalk describe-environments \
            --application-name $APP_NAME \
            --environment-names $ENV_BLUE \
            --query "Environments[0].VersionLabel" \
            --output text)
      
          GREEN_VERSION_LABEL=$(aws elasticbeanstalk describe-environments \
            --application-name $APP_NAME \
            --environment-names $ENV_GREEN \
            --query "Environments[0].VersionLabel" \
            --output text)

      # Determine which environment to swap based on the deployment target
      - name: Determine deployment target and swap environments
        id: determine-env
        env:
          GITHUB_EVENT_NAME: ${{ github.event_name }}
          WORKFLOW_ENV_INPUT: ${{ github.event.inputs.deploy_environment }}
          ENV_BLUE: ${{ env.ENV_BLUE }}
          ENV_GREEN: ${{ env.ENV_GREEN }}
        run: |
          if [ "$GITHUB_EVENT_NAME" == "workflow_dispatch" ] && [ -n "$WORKFLOW_ENV_INPUT" ]; then
            DEPLOY_ENV_TG="$WORKFLOW_ENV_INPUT"
            echo "Triggered by workflow_dispatch. Selected environment: $DEPLOY_ENV_TG"
          else
            COMMIT_MSG=$(git log -1 --pretty=%B)
            echo "Commit message: $COMMIT_MSG"\
            if [[ "$COMMIT_MSG" == *"[blue]"* ]]; then
              DEPLOY_ENV_TG="blue"
              echo "Deploying to Blue environment (from commit message)."
            elif [[ "$COMMIT_MSG" == *"[green]"* ]]; then
              DEPLOY_ENV_TG="green"
              echo "Deploying to Green environment (from commit message)."
            else
              echo "No environment specified! use '[blue]' or '[green]' in the commit message."
              exit 1
            fi
          fi
      
          echo "deploy_env_tg=$DEPLOY_ENV_TG" >> $GITHUB_ENV
          echo "deploy_env_tg=$DEPLOY_ENV_TG" >> $GITHUB_OUTPUT
      
          # Determine which environment was selected for deployment
          if [ "$DEPLOY_ENV_TG" == "blue" ]; then
            echo "Deployment was to Blue ($ENV_BLUE), swapping Blue with Green ($ENV_GREEN)."
            SOURCE_ENV=$ENV_BLUE
            TARGET_ENV=$ENV_GREEN
          elif [ "$DEPLOY_ENV_TG" == "green" ]; then
            echo "Deployment was to Green ($ENV_GREEN), swapping Green with Blue ($ENV_BLUE)."
            SOURCE_ENV=$ENV_GREEN
            TARGET_ENV=$ENV_BLUE
          else
            echo "Invalid environment selected: $DEPLOY_ENV_TG"
            exit 1
          fi          

          # Swap CNAMEs to make the new environment live
          echo "Swapping CNAMEs: $SOURCE_ENV → $TARGET_ENV"
          aws elasticbeanstalk swap-environment-cnames \
            --source-environment-name "$SOURCE_ENV" \
            --destination-environment-name "$TARGET_ENV"
      
          # Fetch the CNAME of the environment (the one with the new version)
          ENV_CNAME=$(aws elasticbeanstalk describe-environments \
            --application-name $APP_NAME \
            --environment-names $TARGET_ENV \
            --query "Environments[0].CNAME" \
            --output text)
      
          echo "$ENV_CNAME" > cname.txt
          echo "Live environment CNAME: $(cat cname.txt)"